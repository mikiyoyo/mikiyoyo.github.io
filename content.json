{"meta":{"title":"mikiyoyo's blogs","subtitle":null,"description":null,"author":"mikiyoyo","url":"http://mikiyoyo.github.io","root":"/"},"pages":[{"title":"分类","date":"2019-09-17T07:17:23.000Z","updated":"2019-09-17T07:24:35.077Z","comments":true,"path":"categories/index.html","permalink":"http://mikiyoyo.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-09-17T10:26:57.000Z","updated":"2019-09-17T11:02:52.333Z","comments":true,"path":"tags/index.html","permalink":"http://mikiyoyo.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Http","slug":"http","date":"2019-09-21T02:58:29.000Z","updated":"2019-09-21T05:20:02.995Z","comments":true,"path":"2019/09/21/http/","link":"","permalink":"http://mikiyoyo.github.io/2019/09/21/http/","excerpt":"","text":"知识点：​ http分为请求和响应 请求：请求分为 请求行（方法）、请求头、请求正文 请求方法：GET 请求获取由Request-URI所标识的资源。POST 在Request-URI所标识的资源后附加新的数据。HEAD 请求获取由Request-URI所标识的资源的响应消息报头（测试资源是否存在）。PUT 请求服务器存储一个资源，并用Request-URI作为其标识。DELETE 请求服务器删除由Request-URI所标识的资源。 (增删查改) OPTIONS 请求查询服务器的性能，或查询与资源相关的选项和需求。TRACE 请求服务器回送收到的请求信息，主要用语测试或诊断。 请求头：Host（发送请求时，该报头域是必需的）Host请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的 User-Agent服务器应用程序就是从User-Agent这个请求报头域中获取到客户端操作系统、浏览器等信息 AcceptAccept请求报头域用于指定客户端接受哪些MIME类型的信息。eg：Accept：image/gif，表明客户端希望接受GIF图象格式的资源；Accept：text/html，表明客户端希望接受html文本。 Accept-CharsetAccept-Charset请求报头域用于指定客户端接受的字符集。eg：Accept-Charset:iso-8859-1,gb2312.如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。 Accept-EncodingAccept-Encoding请求报头域类似于Accept，但是它是用于指定可接受的内容编码。eg：Accept-Encoding:gzip.deflate.如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。 Accept-LanguageAccept-Language请求报头域类似于Accept，但是它是用于指定一种自然语言。eg：Accept-Language:zh-cn.如果请求消息中没有设置这个报头域，服务器假定客户端对各种语言都可以接受。 AuthorizationAuthorization请求报头域主要用于证明客户端有权查看某个资源。当浏览器访问一个页面时，如果收到服务器的响应代码为401（未授权），可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。 Cookie表面请求者身份 Refererreferer包含一个url，代表当前访问url的上一个url Range可以请求实体部分内容，如多线程下载应用该请求头 响应：响应分为 响应头（方法）、响应头、响应正文 响应头：Server服务器所使用的web服务器名称，包含服务器信息。对应请求头的User-Agent Set-cookie向客户端设置的cookie LocationLocation响应报头域用于重定向接受者到一个新的位置。Location响应报头域常用在更换域名的时候。配合302 状态码使用 WWW-AuthenticateWWW-Authenticate响应报头域必须被包含在401（未授权的）响应消息中，客户端收到401响应消息时候，并发送Authorization报头域请求服务器对其进行验证时，服务端响应报头就包含该报头域。 实体头Content-EncodingContent-Encoding实体报头域被用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容的编码，因而要获得Content-Type报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding这样用于记录文档的压缩方法，eg：Content-Encoding：gzip Content-LanguageContent-Language实体报头域描述了资源所用的自然语言。没有设置该域则认为实体内容将提供给所有的语言阅读者。 Content-LengthContent-Length实体报头域用于指明实体正文的长度，以字节方式存储的十进制数字来表示。 Content-TypeContent-Type实体报头域用语指明发送给接收者的实体正文的媒体类型。eg：Content-Type:text/html;charset=ISO-8859-1 Last-ModifiedLast-Modified实体报头域用于指示资源的最后修改日期和时间。 ExpiresExpires实体报头域给出响应过期的日期和时间。为了让代理服务器或浏览器在一段时间以后更新缓存中(再次访问曾访问过的页面时，直接从缓存中加载，缩短响应时间和降低服务器负载)的页面，我们可以使用Expires实体报头域指定页面过期的时间。 状态码：- 1xx: 指示信息—表示请求已接收，继续处理。 - 2xx: 成功—表示请求已经被成功接收、理解、接受。 - 3xx: 重定向—要完成请求必须进行更进一步的操作。 - 4xx: 客户端错误—请求有语法错误或请求无法实现。 - 5xx: 服务器端错误—服务器未能实现合法的请求。 状态代码 状态描述 说明 200 OK 客户端请求成功 400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。 401 Unauthonzed 请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用 403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因 404 Not Found 请求的资源不存在，例如，输入了错误的URL。 500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。 503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。 problem：​ 对http报文的主体以及实体分不清其中的区别，实际上根据图1可知消息头也包括了实体头，而一个报文可以有多个实体，而最关键的一点是“只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。”即未经过传输编码的才是payload body，经传输编码后，实际送出的称为message body。 参考文章： https://www.zhihu.com/question/263752229/answer/614142472 https://notfalse.net/42/http-payload https://blog.csdn.net/gueter/article/details/1524447","categories":[{"name":"协议","slug":"协议","permalink":"http://mikiyoyo.github.io/categories/协议/"}],"tags":[{"name":"http","slug":"http","permalink":"http://mikiyoyo.github.io/tags/http/"}]},{"title":"first blog","slug":"first-blog","date":"2019-09-19T08:04:19.000Z","updated":"2019-09-19T12:44:21.505Z","comments":true,"path":"2019/09/19/first-blog/","link":"","permalink":"http://mikiyoyo.github.io/2019/09/19/first-blog/","excerpt":"","text":"第一篇纪念博客搭建完成~","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://mikiyoyo.github.io/categories/杂谈/"}],"tags":[]}]}